
# Plot GBDT accuracy vs. number of trees
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(num_trees, gbdt_accuracies, label="GBDT Accuracy", marker='o')
plt.axhline(y=rf_accuracy, color='r', linestyle='--', label="RF Accuracy (100 trees)")
plt.xlabel("Number of Trees")
plt.ylabel("Accuracy")
plt.title("GBDT Accuracy vs. Number of Trees")
plt.legend()

# Plot GBDT log loss vs. number of trees
plt.subplot(1, 2, 2)
plt.plot(num_trees, gbdt_log_losses, label="GBDT Log Loss", marker='o')
plt.axhline(y=rf_log_loss, color='r', linestyle='--', label="RF Log Loss (100 trees)")
plt.xlabel("Number of Trees")
plt.ylabel("Log Loss")
plt.title("GBDT Log Loss vs. Number of Trees")
plt.legend()

plt.tight_layout()
plt.show()

#feature importance analysis
# Get feature importances from Random Forest model
rf_feature_importances = rf_model.feature_importances_

# Get feature importances from Gradient Boosting model with the best number of trees
best_gbdt_model = GradientBoostingClassifier(n_estimators=num_trees[np.argmax(gbdt_accuracies)], random_state=42)
best_gbdt_model.fit(X_train_2, y_train_2)
gbdt_feature_importances = best_gbdt_model.feature_importance_

# Create a DataFrame for feature importances
features = X_train_2.columns
rf_importance_df = pd.DataFrame({'Feature': features, 'Random Forest Importance': rf_feature_importances})
gbdt_importance_df = pd.DataFrame({'Feature': features, 'GBDT Importance': gbdt_feature_importances})

# Sort the feature importances for better visualization
rf_importance_df = rf_importance_df.sort_values(by='Random Forest Importance', ascending=False)
gbdt_importance_df = gbdt_importance_df.sort_values(by='GBDT Importance', ascending=False)

# Plot Random Forest feature importances
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
plt.barh(rf_importance_df['Feature'], rf_importance_df['Random Forest Importance'])
plt.xlabel('Importance')
plt.title('Random Forest Feature Importances')

# Plot GBDT feature importances
plt.subplot(1, 2, 2)
plt.barh(gbdt_importance_df['Feature'], gbdt_importance_df['GBDT Importance'])
plt.xlabel('Importance')
plt.title('GBDT Feature Importances')

plt.tight_layout()
plt.show()
